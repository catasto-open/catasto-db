name: tests

on:
  - push
  - pull_request

jobs:
  # linting:
  #   runs-on: ubuntu-latest
  #   steps:
  #     #----------------------------------------------
  #     #       check-out repo and set-up python
  #     #----------------------------------------------
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-python@v2
  #     #----------------------------------------------
  #     #        load pip cache if cache exists
  #     #----------------------------------------------
  #     - uses: actions/cache@v2
  #       with:
  #         path: ~/.cache/pip
  #         key: ${{ runner.os }}-pip
  #         restore-keys: ${{ runner.os }}-pip
  #     #----------------------------------------------
  #     #          install and run linters
  #     #----------------------------------------------
  #     - run: python -m pip install black flake8 isort
  #     - run: |
  #         flake8 .
  #         black . --check
  #         isort .

  tests:
    # needs: linting
    name: ${{ matrix.session }} ${{ matrix.python }} / ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ "ubuntu-latest" ]
        python-version: [ "3.8", "3.9", "3.10" ]
    runs-on: ${{ matrix.os }}
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Set up python ${{ matrix.python-version }}
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install library
        run: poetry install --no-interaction
      #----------------------------------------------
      # Test all the backend components of catasto-db
      #----------------------------------------------
      - name: Run a clean database in ci
        run: |
          source .venv/bin/activate
          invoke docker-compose-postgis --clean --ci
          invoke docker-compose-postgis --start --ci
      # - name: Setup tmate session
      #   uses: mxschmitt/action-tmate@v3
      - name: Run tests in ci
        run: |
          source .venv/bin/activate
          invoke docker-compose-postgis --clean --ci
          invoke docker-compose-postgis --start --ci
          sleep 10
          invoke wait-for-database
          invoke init-database
          invoke migrate-database
          invoke show-database-history
          invoke lint
